Stream MP3 VERSION 1.0

1. INTRODUCTION

This RFC describes a protocol used to stream MP3 data across a network. A
client application issues commands to a server application on UDP port 4240.
Commands include list playable MP3s or starting a stream. In version 1.0 of
this protocol, there is no requirement for a server to track unique client
requests. There is also no requirement for multi-threading. For example, if a
server is currently streaming an MP3 to a client, there is no expectation for
it to simultaneously respond to another client's list request.

The stream consists of UDP datagrams that start with STREAM_DATA and whose
remaining payload consists of an MP3 data frame. UDP is the optimal transport
protocol because if a UDP datagram is lost on the network, a client can still
recover because MP3 frames are independent chunks of compressed audio.

2. OVERALL OPERATION

A server runs indefinitely until it is terminated. The server uses the User
Datagram Protocol (UDP) for its network communication. It listens for messages
from clients on a single UDP socket. UDP datagrams shall start with a valid
command, and may have additional parameters. A typical exchange of messages is
shown below:

      	   CLIENT -------------------- LIST_REQUEST  ----------------------> SERVER
       	   CLIENT <------------------- LIST_REPLY\n  ----------------------- SERVER

	   CLIENT <------------------- song1.mp3\n   ----------------------- SERVER
	   CLIENT <------------------- song2.mp3\n\0 ----------------------- SERVER
	   
	   CLIENT --------------- START_STREAM\nsong1.mp3 -----------------> SERVER
	   
	   CLIENT <------------ STREAM_DATA\n3864A0B3...C3D4 --------------- SERVER
	   CLIENT <------------ STREAM_DATA\n4650F1C2...05A9 --------------- SERVER
					     .
	                                     .
					     .

	   CLIENT <------------ STREAM_DATA\n9450C0B9...C0F1 --------------- SERVER
	   CLIENT <------------------- STREAM_DONE\n ----------------------- SERVER
	   

All messages sent by a client should receive a reply from the server, as long as
the server is not currently processing a request from another client. Since UDP
does not guarantee message delivery, the client should gracefully timeout and
inform the user if a reply has not been seen from the server in a reasonable
amount of time (maximum of 5 seconds). All UDP datagrams shall contain no more
than one command or reply to a command.

3. MESSAGE FORMAT

All messages shall begin with a message type in standard ASCII and may contain
additional parameters. If additional parameters exist (for a LIST_REPLY message
for instance), parameters are separated by a new line character ('\n') and end
with a null-terminator ('\0'). Here's an example of a LIST_REPLY message:

       LIST_REPLY\nsong1.mp3\nsong2.mp3\song3.mp3\n\0

The message strings are not be case sensitive. Therefore "LIST_REQUEST",
"LIST_request", and "list_REQUEST" are equivalent.

4. MESSAGE TYPES

4.1 CLIENT messages

4.1.1 LIST_REQUEST

A LIST_REQUEST message is sent from the client to the server. It has no
parameters. The client expects to see a LIST_REPLY message in return which
includes the list of MP3s the server can stream. LIST_REQUEST takes the form:

LIST_REQUEST

4.1.2 START_STREAM

A START_STREAM message is sent from the client to the server. It has a single
parameter: the name of the MP3 to be streamed. The parameter should match one of the MP3s
listed by the server in response to a LIST_REQUEST message, otherwise a
COMMAND_ERROR message should be sent by the server. A new line character ('\n')
shall separate the message and the parameter. START_STREAM takes the form:

START_STREAM\nsong_to_play.mp3
		
Upon receipt of a valid START_STREAM message from a client, the server shall
begin streaming frames of the MP3 file until there are no more frames. A server
is not interruptable when it's in its streaming state. The last message that is
sent by the server following the entire stream is a STREAM_DONE message.

4.2 SERVER messages

4.2.1 LIST_REPLY

A LIST_REPLY message is sent by the server to the client in response to a
LIST_REQUEST message from the client. A LIST_REPLY message can contain up to
10 other parameters: a list of playable MP3s separated by new-line characters.
LIST_REPLY takes the form:

LIST_REPLY\nsong1.mp3\nsong2.mp3\nsong3.mp3\n...\nsongX.mp3\n\0

The list shall be terminated with a new line and null terminator. No more than
10 songs shall be included so that the entire message can fit within a single
UDP datagram.

4.2.2 COMMAND_ERROR

A COMMAND_ERROR is sent by the server to the client when the client sends an
invalid message. It may be sent when the client sends an unrecognized message,
or attempts to stream an MP3 that does not exist. A COMMAND_ERROR message takes
the form: 

COMMAND_ERROR

4.2.3 STREAM_DATA

STREAM_DATA messages are repeatedly sent by the server after a client sends a
START_STREAM message until there are no more frames to send, at which point
the server shall send a STREAM_DONE message. The server cannot be interrupted
during a stream. The size of the frame is inferred by the size of the datagram.
Because UDP is an unreliable transport layer protocol, we cannot assume the
datagrams will arrive in order. This is okay because each STREAM_DATA message is
an independent, self-contained frame of compressed audio. A STREAM_DATA message
takes the form: 

STREAM_DATA\n65AC3F03

where each two digit hexadecimal number following STREAM_DATA\n represents a
single byte of MP3 frame data.

4.2.4 STREAM_DONE

A STREAM_DONE message is sent by the server when the stream is complete. Until
then, a client that has issued a START_STREAM command should assume the stream
is continuing until an appropriate time-out occurs (5 seconds). A STREAM_DONE
message has no parameters and takes the form:

STREAM_DONE

5. AUTHOR

(Originally)	Maj Greg Brault 
		
(Last updated)	Lt Col David Merritt
Department of Computer and Cyber Sciences, USAF Academy, CO